{"version":3,"sources":["BooksAPI.js","components/ListBooks.js","components/BookTabs.js","components/SearchTab.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","ListBooks","_this$props","this","props","books","updateShelf","react_default","a","createElement","className","style","width","height","backgroundImage","imageLinks","thumbnail","onClick","event","target","value","disabled","title","authors","React","Component","BookTab","currentlyReading","filter","wantToRead","read","map","key","components_ListBooks","react_router_dom","to","SearchTab","state","query","tab","search","_this","setState","trim","_this2","console","log","showingbooks","match","RegExp","escapeRegExp","test","sort","sortBy","placeholder","type","onChange","index","App","isloading","updatebook","BooksAPI","addedBooks","push","componentDidMount","data","_this3","react_router","path","exact","render","BookTabs","components_SearchTab","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4932a559.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from \"react\"\r\nclass ListBooks extends React.Component{\r\n  \r\n    render(){\r\n        const{books,updateShelf}=this.props\r\n        \r\n        \r\n        \r\n    return(\r\n        <div className=\"list-books\">\r\n            \r\n                        <div className=\"book\">\r\n                          <div className=\"book-top\">\r\n                            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage:`url(${books.imageLinks.thumbnail})` }}></div>\r\n                            <div className=\"book-shelf-changer\">\r\n                              <select   \r\n                              onClick={(event) => updateShelf(books, event.target.value)}\r\n                              >\r\n                                <option value=\"move\" disabled>Move to...</option>\r\n                                <option value=\"currentlyReading\" >Currently Reading</option>\r\n                                <option value=\"wantToRead\" >Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                                <option value=\"none\">None</option>\r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"book-title\">{books.title}</div>\r\n                          <div className=\"book-authors\">{books.authors}</div>\r\n                        </div>\r\n                    </div>\r\n         \r\n    )\r\n                      }\r\n\r\n    \r\n}\r\nexport default ListBooks;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ListBooks from \"./ListBooks\";\r\nclass BookTab extends React.Component {\r\n  render() {\r\n    const { books,updateShelf } = this.props;\r\n    const currentlyReading = books.filter((book) => book.shelf === \"currentlyReading\");\r\n    const wantToRead = books.filter((book) => book.shelf === \"wantToRead\");\r\n    const read = books.filter((book) => book.shelf === \"read\");\r\n    return (\r\n      <div className=\"list-books\">\r\n        <div className=\"list-books-title\">\r\n          <h1>MyReads</h1>\r\n        </div>\r\n        <div className=\"list-books-content\">\r\n          <div>\r\n            <div className=\"bookshelf\">\r\n              <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n              <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                  {currentlyReading.map((book) => (\r\n                    <li key={book.id}>\r\n                      <ListBooks \r\n                      books={book} \r\n                      updateShelf={updateShelf}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </div>\r\n            </div>\r\n            <div className=\"bookshelf\">\r\n              <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n              <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                  {wantToRead.map((book) => (\r\n                    <li key={book.id}>\r\n                      <ListBooks books={book} \r\n                      updateShelf={updateShelf}\r\n                      \r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </div>\r\n            </div>\r\n            <div className=\"bookshelf\">\r\n              <h2 className=\"bookshelf-title\">Read</h2>\r\n              <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                  {read.map((book) => (\r\n                    <li key={book.id}>\r\n                      <ListBooks books={book} \r\n                      updateShelf={updateShelf}\r\n                      />\r\n                    </li>\r\n                  ))}\r\n                </ol>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"open-search\">\r\n          <Link to=\"/create\">\r\n            {\" \"}\r\n            <button>Search</button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BookTab;\r\n","import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport escapeRegExp from 'escape-string-regexp'\r\nimport ListBooks from \"./ListBooks\"\r\nimport sortBy from 'sort-by'\r\nclass SearchTab extends React.Component{\r\n    state={\r\n        query: '',\r\n        tab: ''\r\n    }\r\n    search=(query)=>{\r\n        this.setState({\r\n            query:query.trim()\r\n        })\r\n\r\n    }\r\n\r\n    \r\n    \r\n    render(){\r\n      console.log(this.state.tab)\r\n      \r\n        \r\n        const {book}=this.props\r\n        let showingbooks\r\n        if (this.state.query) {\r\n          const match = new RegExp(escapeRegExp(this.state.query), 'i')\r\n          showingbooks = book.filter((books) => \r\n          match.test(books.title),\r\n          match.test(book.authors)\r\n          )\r\n          console.log(showingbooks)\r\n        } else {\r\n            showingbooks = book\r\n            console.log(showingbooks)\r\n          }\r\n      \r\n          showingbooks.sort(sortBy('name'))      \r\n        return(\r\n            \r\n            \r\n            <div className=\"search-books\">\r\n                {JSON.stringify(this.state)}\r\n            <div className=\"search-books-bar\">\r\n                <Link to=\"/\">\r\n              <button className=\"close-search\" >Close</button>\r\n              </Link>\r\n              <div className=\"search-books-input-wrapper\">\r\n                {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                <input  placeholder=\"Search by title or author\"\r\n                 value={this.state.query}\r\n                 type=\"text\"\r\n                 onChange={(event)=>{this.search(event.target.value)     }}/>\r\n\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n              {showingbooks.map((books,index)=>(\r\n                      <li key={index}>\r\n                         <ListBooks \r\n                      books={books} \r\n                      updateShelf={this.props.updateShelf}\r\n                      />\r\n                      </li>\r\n                      ))}\r\n              </ol>\r\n            </div>\r\n          </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\nexport default SearchTab","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\n\r\nimport BookTab from './components/BookTabs'\r\nimport {Route} from \"react-router-dom\"\r\nimport SearchTab from './components/SearchTab'\r\n\r\nclass App extends React.Component {\r\n  state={\r\n    book:[],\r\n    isloading: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    BooksAPI.getAll().then((res) => {\r\n      this.setState({ \r\n        book:res ,\r\n        isloading:true\r\n      })\r\n    })\r\n  }\r\n  updateShelf=(updatebook,shelf)=>{\r\n  BooksAPI.update(updatebook,shelf).then(res=>\r\n    updatebook.shelf=shelf\r\n\r\n    )\r\n    let addedBooks = this.state.book.filter( book => book.id !== updatebook.id )\r\n    console.log(\"Added\")\r\n    console.log(addedBooks)\r\n    console.log(updatebook)\r\n    addedBooks.push(updatebook);\r\n    this.setState({ books: addedBooks })\r\n    this.componentDidMount()\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    \r\n    if(this.state.isloading){\r\n    \r\n    return (\r\n      \r\n\r\n      <div className=\"app\">\r\n        \r\n        <Route path=\"/\" exact render={()=>(\r\n          <BookTab \r\n          books={this.state.book}\r\n          updateShelf={this.updateShelf}\r\n          \r\n          />\r\n        ) }></Route>\r\n     \r\n     <Route path=\"/create\"  render={()=>(\r\n          <SearchTab book={this.state.book}\r\n          updateShelf={this.updateShelf}\r\n          />\r\n        ) }></Route>\r\n          \r\n        \r\n           \r\n        \r\n      </div>\r\n    )\r\n     }\r\n     return(\r\n       <div>\r\n\r\n         <h1>Loading</h1>\r\n       </div>\r\n     )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n\r\n<BrowserRouter>\r\n<App />, \r\n</BrowserRouter>,\r\n\r\ndocument.getElementById('root'))\r\n"],"sourceRoot":""}